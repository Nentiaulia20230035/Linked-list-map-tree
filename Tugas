[11/6 18.21] n: tree
[11/6 18.21] n: class TreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def preorder_traversal(node):
    if node:
        print(node.data, end=" ")
        preorder_traversal(node.left)
        preorder_traversal(node.right)

def inorder_traversal(node):
    if node:
        inorder_traversal(node.left)
        print(node.data, end=" ")
        inorder_traversal(node.right)

def postorder_traversal(node):
    if node:
        postorder_traversal(node.left)
        postorder_traversal(node.right)
        print(node.data, end=" ")

# Membuat pohon biner
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

print("Preorder Traversal:", end=" ")
preorder_traversal(root)
print("\nInorder Traversal:", end=" ")
inorder_traversal(root)
print("\nPostorder Traversal:", end=" ")
postorder_traversal(root)
[11/6 18.21] n: map
[11/6 18.21] n: class MyDictionary:
    def __init__(self):
        self.entries = {}

    def add_entry(self, key, value):
        self.entries[key] = value

    def remove_entry(self, key):
        if key in self.entries:
            del self.entries[key]
        else:
            print(f"Key '{key}' tidak ditemukan dalam kamus.")

    def get_value(self, key):
        if key in self.entries:
            return self.entries[key]
        else:
            return None

    def display(self):
        print("Kamus buah dan sayuran:")
        for key, value in self.entries.items():
            print(f"{key}: {value}")

# Membuat objek MyDictionary
my_dict = MyDictionary()

# Menambahkan entri ke dictionary
my_dict.add_entry("apel", " buah")
my_dict.add_entry("pisang", "buah")
my_dict.add_entry("melon", "buah")
my_dict.add_entry("timun", "sayuran")
my_dict.add_entry("wortel", "sayuran")

# Menampilkan entri dictionary
my_dict.display()

# Menghapus entri dari dictionary
my_dict.remove_entry("pisang")

# Menampilkan entri dictionary setelah penghapusan
my_dict.display()

# Mendapatkan nilai berdasarkan kunci
print("Value for 'apel':", my_dict.get_value("apel"))
print("Value for 'pisang':", my_dict.get_value("pisang"))
[11/6 18.21] n: class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class CircularLinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            new_node.next = self.head
            return
        last = self.head
        while last.next != self.head:
            last = last.next
        last.next = new_node
        new_node.next = self.head

    def display(self):
        if not self.head:
            return
        current = self.head
        while True:
            print(current.data, end=" -> ")
            current = current.next
            if current == self.head:
                break
        print("(head)")

    def remove(self, key):
        if not self.head:
            return
        current = self.head
        previous = None
        while True:
            if current.data == key:
                if previous:
                    previous.next = current.next
                else:
                    if current.next == self.head:
                        self.head = None
                    else:
                        last = self.head
                        while last.next != self.head:
                            last = last.next
                        last.next = current.next
                        self.head = current.next
                return
            elif current.next == self.head:
                break
            previous = current
            current = current.next

# Example usage
cll = CircularLinkedList()
cll.append(1)
cll.append(2)
cll.append(3)
cll.display()  # Output: 1 -> 2 -> 3 -> (head)
cll.remove(2)
cll.display()  # Output: 1 -> 3 -> (head)
[11/6 18.21] n: linked list
